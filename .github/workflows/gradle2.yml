name: Java CI with Gradle

on:
  push:
    branches: [ "main" , "develop" ]
  pull_request:
    branches: [ "main" , "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    # JDK version 설정
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    # 그래들 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Delete Gradle Cache
    - name: Delete Gradle Cache
      run: |
        rm -rf ~/.gradle/caches/
      shell: bash
            
    ## create application-common.yml
    - name: make application.yml
      run: |
        cd ./src/main/resources
        
        touch ./application-common.yml
        
        touch ./application-db.yml
        
        touch ./application-oauth.yml
        
        echo "${{ secrets.APPLICATION_YML_COMMON }}" > ./application-common.yml
        
        echo "${{ secrets.APPLICATION_YML_DB }}" > ./application-db.yml
        
        echo "${{ secrets.APPLICATION_YML_OAUTH }}" > ./application-oauth.yml
      shell: bash

    - name: Make gradlew executable
      run: chmod +x gradlew
      
    # Build
    - name: Build with Gradle
      run: ./gradlew clean build

    # Spring app Docker Image Build
    - name: Build Docker Image For Spring
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      
    # Run Doker Image From Server
    - name: EC2 Docker Run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        password: ${{ secrets.EC2_PW }}
        port: 22
        script: |
          sudo usermod -aG docker $USER
          sudo exec su -l $USER
          sudo docker stop $(docker ps -a -q) 
          sudo docker rm $(docker ps -a -q)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
